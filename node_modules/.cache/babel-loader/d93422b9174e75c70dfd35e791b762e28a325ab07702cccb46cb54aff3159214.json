{"ast":null,"code":"var _jsxFileName = \"/home/fernandacsilva/projetos/fernanda/resume/src/contexts/LanguageContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LanguageContext = /*#__PURE__*/createContext(undefined);\nexport const LanguageProvider = ({\n  children\n}) => {\n  _s();\n  const [language, setLanguage] = useState(\"en\");\n  const contextValue = {\n    language,\n    setLanguage\n  };\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(LanguageProvider, \"JgNS4s3wc06/6u6z+Ak7Ai5ELN8=\");\n_c = LanguageProvider;\nexport const useLanguage = () => {\n  _s2();\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error(\"useLanguage must be used within a LanguageProvider\");\n  }\n  return context;\n};\n_s2(useLanguage, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"LanguageProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","LanguageContext","undefined","LanguageProvider","children","_s","language","setLanguage","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useLanguage","_s2","context","Error","$RefreshReg$"],"sources":["/home/fernandacsilva/projetos/fernanda/resume/src/contexts/LanguageContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\n\ninterface LanguageContextProps {\n  language: string;\n  setLanguage: (lang: string) => void;\n}\n\nconst LanguageContext = createContext<LanguageContextProps | undefined>(\n  undefined\n);\n\ninterface LanguageProviderProps {\n  children: React.ReactNode;\n}\n\nexport const LanguageProvider: React.FC<LanguageProviderProps> = ({\n  children,\n}: any) => {\n  const [language, setLanguage] = useState(\"en\");\n\n  const contextValue: LanguageContextProps = {\n    language,\n    setLanguage,\n  };\n\n  return (\n    <LanguageContext.Provider value={contextValue}>\n      {children}\n    </LanguageContext.Provider>\n  );\n};\n\nexport const useLanguage = () => {\n  const context = useContext(LanguageContext);\n\n  if (!context) {\n    throw new Error(\"useLanguage must be used within a LanguageProvider\");\n  }\n\n  return context;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOnE,MAAMC,eAAe,gBAAGL,aAAa,CACnCM,SACF,CAAC;AAMD,OAAO,MAAMC,gBAAiD,GAAGA,CAAC;EAChEC;AACG,CAAC,KAAK;EAAAC,EAAA;EACT,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE9C,MAAMU,YAAkC,GAAG;IACzCF,QAAQ;IACRC;EACF,CAAC;EAED,oBACEP,OAAA,CAACC,eAAe,CAACQ,QAAQ;IAACC,KAAK,EAAEF,YAAa;IAAAJ,QAAA,EAC3CA;EAAQ;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAACT,EAAA,CAfWF,gBAAiD;AAAAY,EAAA,GAAjDZ,gBAAiD;AAiB9D,OAAO,MAAMa,WAAW,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC/B,MAAMC,OAAO,GAAGrB,UAAU,CAACI,eAAe,CAAC;EAE3C,IAAI,CAACiB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;EACvE;EAEA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CARWD,WAAW;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}